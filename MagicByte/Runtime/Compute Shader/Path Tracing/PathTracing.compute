// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define PI 3.14159265359
#define EPSILON 0.0000001

RWTexture2D<float4> Result;

struct pathTracingObject
{
    float4 Position;

    int indicesCount;
    int indicesOffset;

    float4x4 localToWorldMatrix;
};

StructuredBuffer<pathTracingObject> _pathTracingObject;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;

int _pathTracingObjectCount;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
   
struct Ray {
    float3 raySource;
    float3 rayDirection;
    float3 rayColor;
};

Ray CreateRay(float3 source, float3 direction)
{
    Ray ray;
    ray.raySource = source;
    ray.rayDirection = direction;

    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 source = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(source, direction);
}

struct RayHit
{
    float3 hitPosition;
    float hitDistance;
    float3 hitNormal;

    float3 hitAlbedo;
};

RayHit CreateRayHit()
{
    RayHit hit;

    hit.hitPosition = float3(0.0f, 0.0f, 0.0f);
    hit.hitDistance = 1.#INF;
    hit.hitNormal = float3(0.0f, 0.0f, 0.0f);

    hit.hitAlbedo = float3(0.0f, 0.0f, 0.0f);

    return hit;
}

/*
http://www.graphics.cornell.edu/pubs/1997/MT97.html
https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/barycentric-coordinates
*/
bool IntersectTriangle(Ray ray, float3 vert0, float3 vert1, float3 vert2, inout float t, inout float u, inout float v)
{
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;
    float3 pvec = cross(ray.rayDirection, edge2);
    float det = dot(edge1, pvec);
    if (det < EPSILON)
        return false;
    float inv_det = 1.0f / det;
    float3 tvec = ray.raySource - vert0;
    u = dot(tvec, pvec) * inv_det;
    if (u < 0.0 || u > 1.0f)
        return false;
    float3 qvec = cross(tvec, edge1);
    v = dot(ray.rayDirection, qvec) * inv_det;
    if (v < 0.0 || u + v > 1.0f)
        return false;
    t = dot(edge2, qvec) * inv_det;
    return true;
}


void IntersectMeshObject(pathTracingObject pto, Ray ray, inout RayHit bestHit)
{
    for (int i = 0; i < pto.indicesCount; i += 3) {
        float3 v0 = (mul(pto.localToWorldMatrix, float4(_Vertices[_Indices[pto.indicesOffset + i]], 1))).xyz;
        float3 v1 = (mul(pto.localToWorldMatrix, float4(_Vertices[_Indices[pto.indicesOffset + i + 1]], 1))).xyz;
        float3 v2 = (mul(pto.localToWorldMatrix, float4(_Vertices[_Indices[pto.indicesOffset + i + 2]], 1))).xyz;

        float t, u, v;
        if (IntersectTriangle(ray, v0, v1, v2, t, u, v))
        {
            if (t > 0 && t < bestHit.hitDistance)
            {
                //              
                //bestHit.hitDistance = t;
                //bestHit.hitPosition = ray.raySource + t * ray.rayDirection;
                //bestHit.hitNormal = normalize(bestHit.hitPosition);

                //bestHit.hitAlbedo = float3(1,1,1);
                //
            }
        }

    }
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();

    for (int i = 0; i < _pathTracingObjectCount; i++) {
        pathTracingObject pto = _pathTracingObject[i];
        IntersectMeshObject(pto, ray, bestHit);
    }

    return bestHit;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float3 result = float3(0, 0, 0);

    int width, height;
    Result.GetDimensions(width, height);
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

    for(int i = 0; i < 2;i++) {
        Ray ray = CreateCameraRay(id.xy);
        RayHit hit = Trace(ray);
        result += hit.hitAlbedo;
    }
    //result /= float3(5, 5, 5);

    Result[id.xy] = float4(result, 1);
}
