#pragma kernel CSMain

RWTexture2D<float4> Result;
Texture2D<float4> Output;

float3 Voronoi(float3 pos)
{
	float3 d[8];
	d[0] = float3(0, 0, 0);
	d[1] = float3(1, 0, 0);
	d[2] = float3(0, 1, 0);
	d[3] = float3(1, 1, 0);
	d[4] = float3(0, 0, 1);
	d[5] = float3(1, 0, 1);
	d[6] = float3(0, 1, 1);
	d[7] = float3(1, 1, 1);

	const float maxDisplacement = .7;//.518; //tweak this to hide grid artefacts

	float3 pf = floor(pos);

	const float phi = 1.61803398875;

	float closest = 12.0;
	float3 result;
	for (int i = 0; i < 8; i++)
	{
		float3 v = (pf + d[i]);
		float3 r = frac(phi * v.yzx + 17. * frac(v.zxy * phi) + v * v * .03);
		float3 p = d[i] + maxDisplacement * (r.xyz - .5);

		p -= frac(pos);
		float lsq = dot(p, p);

		if (lsq < closest)
		{
			closest = lsq;
			result = r;
		}
	}
	float3 grayscale = (frac(result.xyz).r + frac(result.xyz).g + frac(result.xyz).b) / 3;
	return grayscale;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	int width, height;
	Result.GetDimensions(width, height);
	float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
	float3 vor = Voronoi(float3(id.x/6, id.y/6, 3));
	Result[id.xy] = float4(vor.r, vor.g, vor.b, 1);
}